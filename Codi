import astropy.io.fits as fits
import numpy as np
import matplotlib.pyplot as plt
import warnings
import pandas as pd
import plotly as px
import math as m
from astropy import units as u 
from specutils.fitting import find_lines_derivative
from specutils import Spectrum1D
from specutils import SpectralRegion
from specutils.fitting import fit_generic_continuum
from specutils.manipulation import extract_region
from pandas import read_csv

# 59266, 2.99792458*(10**18) BC = -8.499 [log(T)- 4]4 + 13.421[log(T)- 4]3- 8.131[log(T)- 4]2 - 3.901 [log(T)- 4] - 0.438
Espectres = fits.open('C:\\Users\\MohamedAmriDoudouh\\Desktop\\Tdr\\mastar-goodspec-v3_1_1-v1_7_7.fits')[1].data
Gaia_Data = fits.open('C:\\Users\\MohamedAmriDoudouh\\Downloads\\mastarall-gaiadr2-extcorr-simbad-ps1-v3_1_1-v1_7_7-v1.fits')[1].data
star_id = int(input("Introdueix Index: "))

Longitud_Ona = Espectres["WAVE"][star_id] *u.AA
Flux_Estrella = Espectres["Flux"][star_id]
Gaia_index = int((np.where(Gaia_Data["PSFMAG"] == Espectres["PSFMAG"][star_id])[0])[0])
Gaia_Data_Py = pd.DataFrame(Gaia_Data['R_EST'])
Distancia_parsec = int(Gaia_Data_Py.iloc[Gaia_index])

print(Distancies_Gaia)


if Espectres["PHOTOCAT"][star_id] == "sdss_dr8":
  EspectresUGRIZ =  [float(i) for i in Espectres["PSFMAG"][star_id]]
  g = EspectresUGRIZ[1]
  r = EspectresUGRIZ[2]
  B = float(g + 0.3130*(g - r) + 0.2271)
  V = float(g - 0.5784*(g - r) - 0.0038)
  Color_Index = B - V
elif Espectres["PHOTOCAT"][star_id] == "ps1":
    EspectresGRIZ = [float(i) for i in Espectres["PSFMAG"][star_id]]
    g = EspectresGRIZ[1]
    r = EspectresGRIZ[2]
    B = float(g + 0.3130*(g - r) + 0.2271)
    V = float( g - 0.5784*(g - r) - 0.0038)
    Color_Index = B - V
elif Espectres["PHOTOCAT"][star_id] == "apass_dr8":
    EspectresGRI = [float(i) for i in Espectres["PSFMAG"][star_id]]
    g = EspectresGRI[1]
    r = EspectresGRI[2]
    B = float(g + 0.3130*(g - r) + 0.2271)
    V = float(g - 0.5784*(g - r) - 0.0038)
    Color_Index = B - V
elif Espectres["PHOTOCAT"][star_id] == "gaia_dr2":
    EspectresGAIA = [float(i) for i in Espectres["PSFMAG"][star_id]]
    G = float(EspectresGAIA[1])
    G_BP = float(EspectresGAIA[2])
    G_RP = float(EspectresGAIA[3])
    V = 0.02704 - 0.01424*(G_BP - G_RP) + 0.2156*((G_BP - G_RP)**2.0) - 0.01426*((G_BP - G_RP)**3.0) + G
    g = - 0.2199 + 0.6365*(G_BP - G_RP) + 0.1548*((G_BP - G_RP)**2.0) - 0.0064*((G_BP - G_RP)**3.0) + G
    r = +0.09837 - 0.08592*(G_BP - G_RP) - 0.1907*((G_BP - G_RP)**2.0) + 0.1701*((G_BP - G_RP)**3.0) - 0.02263*((G_BP - G_RP)**4.0) + G
    B = g + 0.3130*(g - r) + 0.2271
    Color_Index = B - V

Teff = int(((4600*((1/(0.92 * Color_Index + 1.7)) + (1/(0.92 * Color_Index + 0.62))))))
print(Teff)
BC = -8.499*((m.log(Teff)-4)**4) + 13.421*((m.log(Teff)-4)**3) - 8.131*((m.log(Teff)-4)**2) - 3.901*(m.log(Teff)-4) - 0,438
print(BC)

L_Sol = 3.827*(10**26)
L = (10**(0.4*(4.85 - V)))*L_Sol
print(L)


Classes_espectrals = pd.read_csv('C:\\Users\\MohamedAmriDoudouh\\Downloads\\Espectral_classes.csv')
Classes_espectrals_1 = Classes_espectrals.iloc[(Classes_espectrals['Temp']-Teff).abs().argsort()[:3]]
Classe_Estrella = Classes_espectrals_1.iloc[(Classes_espectrals_1['Abs_Mag']-V).abs().argsort()[:1]]
print(Classe_Estrella)
print(V)

EspectreD1 = Spectrum1D(Espectres["FLUX"][star_id]*(u.Jy), Espectres["WAVE"][star_id]*u.AA)
EspectreD1_net = extract_region(EspectreD1, SpectralRegion(4000* u.AA, 7000 * u.AA))
EspectreD1_X = EspectreD1_net.spectral_axis
EspectreD1_Y = EspectreD1_net.flux

Espectre_Ajustat = fit_generic_continuum(EspectreD1_net)
Flux_Ajustat = Espectre_Ajustat(EspectreD1_X)
Espectre_normalitzat = EspectreD1_net / Flux_Ajustat

n = -15
with warnings.catch_warnings():  # Ignora avisos
    warnings.simplefilter('ignore')
    linies = find_lines_derivative(Espectre_normalitzat, flux_threshold= n)
while len(linies[linies['line_type'] == 'absorption']) >= 30:
    n += 0.1
    with warnings.catch_warnings():
         warnings.simplefilter('ignore')
         linies = find_lines_derivative(Espectre_normalitzat, flux_threshold= n)

LiniesÀtoms = read_csv('C:\\Users\\MohamedAmriDoudouh\\Desktop\\Tdr\\ElementsTDR.csv')
LiniesEspectre = linies[linies['line_type'] == 'absorption']['line_center'] / u.AA

LiniesNom = []
LiniesTrobades = []
Id_estrlla = str(Espectres["PLATE"][star_id])
for linies_abs in LiniesEspectre:
    for Linia_atom in LiniesÀtoms['Rest λ (Å)']:
            x = float(Linia_atom) - float(linies_abs)
            if  x <= 1.5 and x >= -1.5:
                n = LiniesÀtoms[LiniesÀtoms['Rest λ (Å)'] == Linia_atom].index[0]
                LiniesNom.append(LiniesÀtoms['Name'][n])
                LiniesTrobades.append(LiniesÀtoms['Rest λ (Å)'][n])
fig = px.line(x=EspectreD1_net.spectral_axis, y=EspectreD1_net.flux, title=Id_estrlla,)
LiniesTrobades_Python = np.array(LiniesTrobades)

for LiniaTrobada in LiniesTrobades_Python:
        Valor_index = LiniesTrobades_Python.tolist().index(LiniaTrobada)
        LiniaNom = LiniesNom[Valor_index]
        Posició_Nom = int(LiniaTrobada-2)
        fig.add_vline(x=LiniaTrobada, line_width=1, line_dash="dash", line_color="orange", annotation_text=LiniaNom, annotation_position="bottom right")
fig.show()

'''
fig1, ax1 = plt.subplots(figsize=(10,9))
ax1.plot(Espectre_normalitzat.spectral_axis, Espectre_normalitzat.flux)
ax1.grid(True)
fig,ax = plt.subplots(figsize=(15,3))
plt.plot(EspectreD1_X , EspectreD1_Y)
plt.plot(EspectreD1_X, Flux_Ajustat)
plt.title('Star star_id: {}'.format(star_id))
plt.xlabel('Wavelength (Ang)')
plt.ylabel('Counts')
fig1, ax1 = plt.subplots(figsize=(10,9))
plt.show
for LiniaTrobada in LiniesTrobades_Python:
        Valor_index = LiniesTrobades_Python.tolist().index(LiniaTrobada)
        LiniaNom = LiniesNom[Valor_index]
        Posició_Nom = int(LiniaTrobada-2)
        fig.add_vline(x=LiniaTrobada, line_width=1, line_dash="dash", line_color="orange", annotation_text=LiniaNom, annotation_position="bottom right")
'''

#Estrelles a veure 687, 89, 876,17893,8763, 39657, 8912, 30000, 456, 459

# Si la estrella té temperatura entre 2500 i 3900 s'haurà de mirar com detectar els elements
